/*
 * Pueda usar esta plantilla para la carga del reto a iMaster
 * Copie las clases de los paquetes Modelo, Vista, Controlador y Util
 * No incluya los import de los archivos .java solo las clases
 */
// Importaciones necesarias en iMaster
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.util.ArrayList;


// Util (No modificar)
class JDBCUtilities {
    private static final String DATABASE_LOCATION = "ProyectosConstruccion.db";


    public static Connection getConnection() throws SQLException {
        String url = "jdbc:sqlite:"+DATABASE_LOCATION;


        return DriverManager.getConnection(url);
    }
}


// Remplace en adelante por las clases de sus archivos .java


// Vista
class ViewRequerimientos{

	public static final ControladorRequerimientos controlador = new ControladorRequerimientos();
	
	public static void requerimiento1() {
		
		try {
			ArrayList<Requerimiento_1> listarequerimiento_1;
			listarequerimiento_1 = controlador.consultaRequerimiento_1();
			
			for(Requerimiento_1 requerimiento_1: listarequerimiento_1){
				
				System.out.println(
				requerimiento_1.getFechaCompra() + " " +
				requerimiento_1.getCodCompra() + " " +
				requerimiento_1.getNombreProveedor() + " " +
				requerimiento_1.getPagado());
				
			}
		}
		catch(Exception e){
			System.err.println(e);
		}
	}
	
	public static void requerimiento2() {
		
		try {
			ArrayList<Requerimiento_2> listarequerimiento_2;
			listarequerimiento_2 = controlador.consultaRequerimiento_2();
			
			for(Requerimiento_2 requerimiento_2: listarequerimiento_2){
				
				System.out.println(
				requerimiento_2.getFecIni() + " " +
				requerimiento_2.getNombreCiudad() + " " +
				requerimiento_2.getConstructora() + " " +
				requerimiento_2.getNombreLider() + " " +
				requerimiento_2.getCodigoTipo() + " " +
				requerimiento_2.getEstrato());
				
			}
		}
		catch(Exception e){
			System.err.println(e);
		}
	}
	
	public static void requerimiento3() {
        
		try {
            
			ArrayList<Requerimiento_3> listaRequerimiento_3;
            		listaRequerimiento_3 = controlador.consultaRequerimiento_3();

            		for(Requerimiento_3 requerimiento_3: listaRequerimiento_3){
                
            		System.out.println(requerimiento_3.getAbrev());
            		}
            
        	} catch (Exception e){
        	
            System.err.println(e);
        }
    } 

}


// Controlador
class ControladorRequerimientos {
	
	private final Requerimiento_1Dao requerimientodao_1 = new Requerimiento_1Dao();
	private final Requerimiento_2Dao requerimientodao_2 = new Requerimiento_2Dao();
	private final Requerimiento_3Dao requerimientodao_3 = new Requerimiento_3Dao();

	
	public ArrayList<Requerimiento_1> consultaRequerimiento_1() throws SQLException{
		return this.requerimientodao_1.requerimiento1();
		
	}
	
	public ArrayList<Requerimiento_2> consultaRequerimiento_2() throws SQLException{
		return this.requerimientodao_2.requerimiento2();
		
	}
	
	public ArrayList<Requerimiento_3> consultaRequerimiento_3() throws SQLException{
		return this.requerimientodao_3.requerimiento3();
		
	}

}


// Modelo
// VO

class Requerimiento_1 {

	//Atributos
	private String fechaCompra;
	private Integer codCompra;
	private String nombreProveedor;
	private String pagado;
	
	public Requerimiento_1() {
		
	}
	
	public Requerimiento_1(String fechaCompra, Integer codCompra, String nombreProveedor, String pagado) {
		
		this.fechaCompra = fechaCompra;
		this.codCompra = codCompra;
		this.nombreProveedor = nombreProveedor;
		this.pagado = pagado;
	}

	public String getFechaCompra() {
		return fechaCompra;
	}
	
	public void setFechaCompra(String fechaCompra) {
		this.fechaCompra = fechaCompra;
	}
	
	public Integer getCodCompra() {
		return codCompra;
	}
	
	public void setCodCompra(Integer codCompra) {
		this.codCompra = codCompra;
	}
	
	public String getNombreProveedor() {
		return nombreProveedor;
	}
	
	public void setNombreProveedor(String nombreProveedor) {
		this.nombreProveedor = nombreProveedor;
	}
	public String getPagado() {
		return pagado;
	}
	
	public void setPagado(String pagado) {
		this.pagado = pagado;
	}

}


class Requerimiento_2 {

	// Atributos
    private String fecIni;
    private String nombreCiudad;
    private String constructora;
    private String nombreLider;
    private Integer codigoTipo;
    private Integer estrato;

    public Requerimiento_2(){

    }

    public Requerimiento_2(String fecIni, String nombreCiudad, String constructora, String nombreLider, Integer codigoTipo, Integer estrato){
        this.fecIni = fecIni;
        this.nombreCiudad = nombreCiudad;
        this.constructora = constructora;
        this.nombreLider = nombreLider;
        this.codigoTipo = codigoTipo;
        this.estrato = estrato;
    }

    public String getConstructora() {
        return constructora;
    }

    public void setConstructora(String constructora) {
        this.constructora = constructora;
    }
    public Integer getEstrato() {
        return estrato;
    }

    public void setEstrato(Integer estrato) {
        this.estrato = estrato;
    }


    public String getFecIni() {
        return fecIni;
    }

    public void setFecIni(String fecIni) {
        this.fecIni = fecIni;
    }

    public String getNombreCiudad() {
        return nombreCiudad;
    }

    public void setNombreCiudad(String nombreCiudad) {
        this.nombreCiudad = nombreCiudad;
    }

    public String getNombreLider() {
        return nombreLider;
    }

    public void setNombreLider(String nombreLider) {
        this.nombreLider = nombreLider;
    }

    public Integer getCodigoTipo() {
        return codigoTipo;
    }

    public void setCodigoTipo(Integer codigoTipo) {
        this.codigoTipo = codigoTipo;
    }
}


class Requerimiento_3 {

    private String abrev;
    
    public Requerimiento_3(){
        
    }
    
    public Requerimiento_3(String abrev){
        this.setAbrev(abrev);
    }
    
    public String getAbrev(){
        return this.abrev;
    }
    
    public void setAbrev(String abrev){
        this.abrev = abrev;
    }
}


// DAO
class Requerimiento_1Dao {

	public ArrayList<Requerimiento_1> requerimiento1() throws SQLException{
		
		ArrayList<Requerimiento_1> respuesta = new ArrayList<Requerimiento_1>(); //porque esta notacion al final ()??
		Connection conn = JDBCUtilities.getConnection();
		try {
			
			String consulta = "SELECT c.Fecha, c.ID_Compra, c.Proveedor, c.Pagado "
							+ "FROM compra c ORDER BY c.ID_Compra DESC LIMIT 10";
			PreparedStatement stmt = conn.prepareStatement(consulta);
			ResultSet rs = stmt.executeQuery();
			
			//recorrer los registros en los VO especificos...
			while(rs.next()) {
				
				Requerimiento_1 requerimiento_1 = new Requerimiento_1();

				requerimiento_1.setFechaCompra(rs.getString("Fecha"));
				requerimiento_1.setCodCompra(rs.getInt("ID_Compra"));
				requerimiento_1.setNombreProveedor(rs.getString("Proveedor"));
				requerimiento_1.setPagado(rs.getString("Pagado"));
				respuesta.add(requerimiento_1);
			}
			stmt.close();
			rs.close();
			
			}
		catch (SQLException e){
			System.out.println("Error de consulta Requerimiento_1" + e);
		}
		finally {
			if(conn != null) {
				conn.close();
			}
		}
		return respuesta;
	}

}


class Requerimiento_2Dao {

	public ArrayList<Requerimiento_2> requerimiento2() throws SQLException {

        ArrayList<Requerimiento_2> respuesta = new ArrayList<Requerimiento_2>();
        Connection conexion = JDBCUtilities.getConnection();

        try {
            String consulta = "SELECT p.Fecha_Inicio, p.Ciudad, p.Constructora, " +
                              "l.Nombre || ' ' || l.Segundo_Apellido as 'Nombre Lider', " +
                              "t.Codigo_Tipo, t.Estrato " +
                              "FROM Proyecto p  INNER JOIN Lider l ON p.ID_Lider = l.ID_Lider " + 
                              "INNER JOIN Tipo t ON p.ID_Tipo = t.ID_Tipo " +
                              "WHERE (p.Fecha_Inicio >= '2019-09-01' AND p.Fecha_Inicio <= '2019-09-09' AND p.Ciudad = 'Pereira')";

            PreparedStatement statement = conexion.prepareStatement(consulta);
            ResultSet resultSet = statement.executeQuery();

            while(resultSet.next()){
                Requerimiento_2 requerimiento_2 = new Requerimiento_2(
                    resultSet.getString("Fecha_Inicio"),
                    resultSet.getString("Ciudad"),
                    resultSet.getString("Constructora"),
                    resultSet.getString("Nombre Lider"),
                    resultSet.getInt("Codigo_Tipo"),
                    resultSet.getInt("Estrato")
                );

                respuesta.add(requerimiento_2);
            }

            resultSet.close();
            statement.close();

        } catch (SQLException e) {
            System.err.println("Error en la consulta SQL Requerimiento 2 -> " + e);
        } finally {
            if (conexion != null){
                conexion.close();
            }
        }
        
        return respuesta;
    }
    
    public ArrayList<Requerimiento_2> requerimiento2(String fIni, String fFin, String nCiu) throws SQLException {

        ArrayList<Requerimiento_2> respuesta = new ArrayList<Requerimiento_2>();
        Connection conexion = JDBCUtilities.getConnection();

        try {
            String consulta = "SELECT p.Fecha_Inicio, p.Ciudad, p.Constructora, " +
                              "l.Nombre || ' ' || l.Primer_Apellido as 'Nombre Lider', " +
                              "t.Codigo_Tipo, t.Estrato " +
                              "FROM Proyecto p  INNER JOIN Lider l ON p.ID_Lider = l.ID_Lider " + 
                              "INNER JOIN Tipo t ON p.ID_Tipo = t.ID_Tipo " +
                              "WHERE (p.Fecha_Inicio >= '" + fIni + "' AND p.Fecha_Inicio <= '" +fFin + "' AND p.Ciudad = '" + nCiu +"')";

            PreparedStatement statement = conexion.prepareStatement(consulta);
            ResultSet resultSet = statement.executeQuery();

            while(resultSet.next()){
                Requerimiento_2 requerimiento_2 = new Requerimiento_2(
                    resultSet.getString("Fecha_Inicio"),
                    resultSet.getString("Ciudad"),
                    resultSet.getString("Constructora"),
                    resultSet.getString("Nombre Lider"),
                    resultSet.getInt("Codigo_Tipo"),
                    resultSet.getInt("Estrato")
                );

                respuesta.add(requerimiento_2);
            }

            resultSet.close();
            statement.close();

        } catch (SQLException e) {
            System.err.println("Error en la consulta SQL Requerimiento 2 -> " + e);
        } finally {
            if (conexion != null){
                conexion.close();
            }
        }
        
        return respuesta;
    }

}


class Requerimiento_3Dao {

	public ArrayList<Requerimiento_3> requerimiento3() throws SQLException {

        ArrayList<Requerimiento_3> respuesta = new ArrayList<Requerimiento_3>();
        Connection conn = JDBCUtilities.getConnection();

        try {
            String consulta = "SELECT SUBSTR(l.Nombre,1,3) || SUBSTR(l.Primer_Apellido,1,3) "
                    + "|| SUBSTR(l.Segundo_Apellido,1,3) AS 'Abrev.' "
                    + "FROM Lider l";

            PreparedStatement statement = conn.prepareStatement(consulta);
            ResultSet rs = statement.executeQuery();

            while (rs.next()) {
                Requerimiento_3 requerimiento_3 = new Requerimiento_3(rs.getString("Abrev."));
                respuesta.add(requerimiento_3);
            }

            rs.close();
            statement.close();

        } catch (SQLException e) {
            System.err.println("Error en la consulta SQL Requerimiento_3 -> " + e);
        } finally {
            if (conn != null) {
            	conn.close();
            }
        }

        return respuesta;

    }

}